// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"conformitea/server/config"
	"conformitea/server/internal/gateway/gin_session"
	"conformitea/server/internal/gateway/hydra"
	"conformitea/server/internal/gateway/microsoft"
	"conformitea/server/internal/logger"
	"conformitea/server/types"
	"github.com/google/wire"
)

// Injectors from wire.go:

// Creates a server instance with all dependencies injected
func InitializeServer(cfg config.Config) (types.PublicServer, error) {
	loggerConfig := ProvideLoggerConfig(cfg)
	zapLogger, err := logger.ProvideLogger(loggerConfig)
	if err != nil {
		return nil, err
	}
	redisConfig := ProvideRedisConfig(cfg)
	httpServerConfig := ProvideHTTPServerConfig(cfg)
	store, err := gin_session.ProvideRedisStore(redisConfig, httpServerConfig)
	if err != nil {
		return nil, err
	}
	hydraConfig := ProvideHydraConfig(cfg)
	hydraClient, err := hydra.ProvideHydraClient(hydraConfig)
	if err != nil {
		return nil, err
	}
	microsoftOAuthConfig := ProvideMicrosoftOAuthConfig(cfg)
	oAuthClient := microsoft.ProvideMicrosoftClient(microsoftOAuthConfig)
	publicServer, err := Initialize(cfg, zapLogger, store, hydraClient, oAuthClient)
	if err != nil {
		return nil, err
	}
	return publicServer, nil
}

// wire.go:

// ProvideLoggerConfig extracts logger configuration from the main config.
func ProvideLoggerConfig(config2 config.Config) config.LoggerConfig {
	return config2.Logger
}

// ProvideRedisConfig extracts Redis configuration from the main config.
func ProvideRedisConfig(config2 config.Config) config.RedisConfig {
	return config2.Redis
}

// ProvideHTTPServerConfig extracts HTTP server configuration from the main config.
func ProvideHTTPServerConfig(config2 config.Config) config.HTTPServerConfig {
	return config2.HTTPServer
}

// ProvideHydraConfig extracts Hydra configuration from the main config.
func ProvideHydraConfig(config2 config.Config) config.HydraConfig {
	return config2.Hydra
}

// ProvideMicrosoftOAuthConfig extracts Microsoft OAuth configuration from the main config.
func ProvideMicrosoftOAuthConfig(config2 config.Config) config.MicrosoftOAuthConfig {
	return config2.OAuth.Microsoft
}

// ServerSet contains all the providers needed to build a server
var ServerSet = wire.NewSet(
	ProvideLoggerConfig,
	ProvideRedisConfig,
	ProvideHTTPServerConfig,
	ProvideHydraConfig,
	ProvideMicrosoftOAuthConfig, logger.ProvideLogger, gin_session.ProvideRedisStore, hydra.ProvideHydraClient, microsoft.ProvideMicrosoftClient, Initialize,
)
